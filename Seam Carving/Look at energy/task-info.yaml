type: edu
files:
- name: src/seamcarving/Main.kt
  visible: true
  text: |
    package seamcarving

    fun main() {
        print("Hello, World!")
    }
  learner_created: false
- name: test/blue.png
  visible: false
  learner_created: false
- name: test/SeamCarvingTest.java
  visible: false
  text: |
    import org.apache.commons.codec.binary.Hex;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import javax.imageio.ImageIO;
    import java.awt.image.BufferedImage;
    import java.io.ByteArrayOutputStream;
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;
    import java.util.Arrays;
    import java.util.List;


    class CheckFailException extends Exception {
        public CheckFailException(String s) {
            super(s);
        }
    }

    class OutFile {
        String hash;
        String filename;
        int width;
        int height;

        OutFile(String filename, int width, int height, String hash) {
            this.filename = filename;
            this.width = width;
            this.height = height;
            this.hash = hash;
        }

        public boolean compareWithActualMD5() throws CheckFailException {
            try {
                File imgPath = new File(filename);
                BufferedImage sourceImage = ImageIO.read(imgPath);

                BufferedImage rgbImage =
                    new BufferedImage(sourceImage.getWidth(), sourceImage.getHeight(), BufferedImage.TYPE_INT_RGB);
                for (int i = 0; i < sourceImage.getWidth(); i++) {
                    for (int j = 0; j < sourceImage.getHeight(); j++) {
                        rgbImage.setRGB(i, j, sourceImage.getRGB(i, j));
                    }
                }

                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(rgbImage, "bmp", baos);

                MessageDigest md = MessageDigest.getInstance("MD5");
                md.update(baos.toByteArray());
                byte[] digest = md.digest();
                String actualHash = Hex.encodeHexString(digest);
                if (!actualHash.equalsIgnoreCase(hash)) {
                    throw new CheckFailException(
                        String.format(
                            "Hash sum of your image (%s) does not match expected value",
                            actualHash));
                }
            } catch (IOException e) {
                throw new CheckFailException(
                    String.format(
                        "Could not read output file '%s'. Please check you produce output file",
                        filename));
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
                throw new CheckFailException("Internal test error. please report to Hyperskill team");
            }

            return true;
        }

        public boolean compareActualDimensions() throws CheckFailException {
            try {
                BufferedImage image = ImageIO.read(new File(filename));

                if (image == null) {
                    throw new CheckFailException(
                        String.format(
                            "File format error. Looks like your output '%s' is not a valid image file.",
                            filename));
                }

                if (image.getWidth() != width) {
                    throw new CheckFailException(
                        String.format(
                            "Dimensions mismatch. Output image width: %d; expected width: %d",
                            image.getWidth(), width));
                }

                if (image.getHeight() != height) {
                    throw new CheckFailException(
                        String.format(
                            "Dimensions mismatch. Output image height: %d; expected height: %d",
                            image.getHeight(), height));
                }

            } catch (IOException e) {
                throw new CheckFailException(
                    String.format(
                        "Could not read output file '%s'. Please check you produce output file",
                        filename));
            }

            return true;
        }
    }

    public class SeamCarvingTest extends StageTest<OutFile> {

        @Override
        public List<TestCase<OutFile>> generate() {

            return Arrays.asList(
                new TestCase<OutFile>()
                    .addArguments("-in", "test/small.png", "-out", "test/small-energy.png")
                    .setAttach(new OutFile("test/small-energy.png", 15, 10, "931d2f37bb499ef6892db026f57525ba")),

                new TestCase<OutFile>()
                    .addArguments("-in", "test/blue.png", "-out", "test/blue-energy.png")
                    .setAttach(new OutFile("test/blue-energy.png", 500, 334, "0bdde2d55124785b16df005088f17e1a")),

                new TestCase<OutFile>()
                    .addArguments("-in", "test/trees.png", "-out", "test/trees-energy.png")
                    .setAttach(new OutFile("test/trees-energy.png", 600, 429, "89c4037e6c0b0de040d9fb85e4450ebc"))
            );
        }

        @Override
        public CheckResult check(String reply, OutFile expectedFile) {
            try {
                expectedFile.compareActualDimensions();
                expectedFile.compareWithActualMD5();
            } catch (CheckFailException e) {
                return CheckResult.wrong(e.getMessage());
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/small.png
  visible: false
  learner_created: false
- name: test/trees.png
  visible: false
  learner_created: false
- name: test/small-energy.png
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/9017#comment
status: Failed
feedback:
  message: "Wrong answer in test #1\n\nHash sum of your image (e6b4769d4dac4f4d54bf6b21fb026a65)\
    \ does not match expected value\n\nPlease find below the output of your program\
    \ during this failed test.\n\n---\n\nArguments: -in test/small.png -out test/small-energy.png\n\
    \n267.6901193544506\n139.17255476565774\n215.7127719909046\n121.81543416168577\n\
    247.69941461376126\n132.61975720080324\n262.97718532222524\n156.8948692596415\n\
    217.64650238402638\n43.18564576337837\n316.6433324736209\n196.5807722031837\n\
    186.51273414970893\n278.9587783167972\n100.86624807139403\n346.28889673219385\n\
    149.72975656161336\n243.17689034939156\n124.25779653607253\n241.03526712910707\n\
    297.6944742517066\n140.81193131265547\n268.10259230376715\n81.72514912803769\n\
    382.3976987378454\npixel Energy more than max pixel energy \n113.718951806636\n\
    234.17087777945403\n45.91296113299599\n260.4803255526221\n209.93570444305084\n\
    264.89998112495215\n199.18584287042088\n165.75282803017268\n335.01343256651666\n\
    94.04254356406997\n280.43715873614184\n248.34451876375286\n230.18253626198492\n\
    33.06055050963308\n76.6550715869472\n307.6962788205278\n85.21150157109074\n312.2915304647246\n\
    154.9322432549145\n265.8138446356773\n379.7367509209505\npixel Energy more than\
    \ max pixel energy \n251.04780421266383\n53.376024580330075\n380.8634926059467\n\
    pixel Energy more than max pixel energy \n344.18163809244675\n381.48394461628396\n\
    pixel Energy more than max pixel energy \n129.59552461408535\n352.0752760419283\n\
    342.4164131580144\n385.2090341619729\npixel Energy more than max pixel energy\
    \ \n330.73705568018835\n255.88278566562465\n164.57824886661055\n137.8259772321604\n\
    183.32212086925026\n233.68568633957878\n233.7798109332797\n375.90291299749197\n\
    pixel Energy more than max pixel energy \n354.4037245853943\n339.7572662946298\n\
    415.38656694698255\npixel Energy more than max pixel energy \n214.00467284617875\n\
    92.6066952223218\n202.43023489587716\n201.1740539930535\n206.73412877413347\n\
    220.95927226527516\n243.21389762922678\n336.40154577528324\n385.36995212392986\n\
    pixel Energy more than max pixel energy \n254.78422243145278\n165.72869395490932\n\
    118.60438440462477\n104.513157066467\n105.3707739366092\n216.2960933535324\n211.7663807123312\n\
    234.23065555131762\n322.7553252852693\n317.99371062962865\n276.58994920278644\n\
    165.94577427581578\n89.99444427296609\n144.93791774411554\n142.28141129465928\n\
    144.20124826089406\n187.31524230558495\n184.94864151974733\n265.4298400707803\n\
    299.8532974639432\n279.0627169652012\n151.9802618763371\n118.70551798463288\n\
    102.65476121447071\n98.60020283954795\n66.73829485385434\n164.42627527253666\n\
    159.58070058750837\n203.4305778392226\n236.23081932719955\n249.33511585815586\n\
    136.7296602789607\n133.7497663549361\n167.16758058906038\n141.0319112825179\n\
    134.60312032044428\n95.39392014169457\n145.58502670261115\n157.05731437917814\n\
    221.03393404633596\n245.2060358147817\n181.01657382681842\n168.51409436602032\n\
    133.2216198670471\n148.6741403203664\n49.06118628814432\n181.30361276047424\n\
    120.02916312296774\n172.87857010051883\n216.2290452275087\n199.41414192579222\n\
    167.22141011246137\n197.38287666360523\n213.77324435017587\n185.9247159470736\n\
    149.4255667548228\n54.96362433464518\n233.39451578818213\n172.69626515938322\n\
    200.98009851724126\n181.02762220169606\n201.07212636265623\n179.06981878585793\n\
    173.4733408913312\n186.7404616037992\n102.67424214475605\n120.85942247090212\n\
    193.00518127760196\n208.24024587000469\n187.64860777527767\n184.04890654388578\n\
    209.42779185198893\n178.89102828258325\n180.01111076819674\n41.1703777004778\n\
    366.0601043544625 MAX"
  time: "Thu, 22 Dec 2022 08:43:17 UTC"
record: 4
